let Comment,mongoose,Joi;_389‍.x([["write",()=>write],["remove",()=>remove]]);_389‍.w("../../models/comments",[["default",["Comment"],function(v){Comment=v}]]);_389‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_389‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);



/*
    {
        "content": "댓글테스트"
    }
*/
       const write = async (ctx) => {
    const schema = Joi.object().keys({
        content: Joi.string().required(),
    });

    const result = schema.validate(ctx.request.body);
    if(result.error){
        ctx.status = 400;
        ctx.body = result.error;
        return;
    }

    const { content } = ctx.request.body;
    const comment = new Comment({
        content,
        user:ctx.state.user,
        post:ctx.state.post,
    });

    try{
        await comment.save();
        ctx.body = comment;
    }catch(e){
        ctx.throw(500,e);
    }
}

       const remove = async (ctx) => {
    const { id } = ctx.params;
    try{
        await Comment.findByIdAndRemove(id).exec();
        ctx.status = 204;
    }catch(e){
        ctx.throw(500,e);
    }
}